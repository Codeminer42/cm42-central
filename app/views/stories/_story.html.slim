- search_result = defined?(search_result) ? search_result : false
- story_dom_id = search_result ? "story-search-result-#{story.id}" : story_anchor(story)
- story_dom_id += "-#{story.calculate_positioning_column.sub("#","")}" if story.new_record?

- cache_if story.persisted?, story do
  .story.closed class=[story.story_type, story.state, ("new-story" if story.new_record?), ("searchResult" if search_result)] id=story_dom_id data-id=story.id data-position=story.position data-state=story.state data-story-type=story.story_type data-controller="story" data-action="click->story#open"
    input.toggle-story type="checkbox" data-story-target="checkbox" data-turbo-permanent=true id="#{story_dom_id}-toggle"
    .closed
      .state-actions
        - if search_result
          button#locate.btn.btn-default.locate-btn type="button"
            i.mi.md-gps-fixed.md-14
              | gps_fixed

        - if story.persisted? && story.events.any?
          div
            .state-actions
              - story.events.each do |event|
                = form_for [:transition, @project, story] do |form|
                  = form.submit event, name: "event", class: "#{event} transition"

      .story-icons
        span.popover-activate
          = icon_text(story)
          span.estimate = story.estimate
          - if story.notes.length > 0 || story.description.present?
            i.mi.md-14.md-dark.details question_answer

      .story-title
        = story.title
        '
        abbr.initials title=story.owned_by_name = story.owned_by_initials

    .editing
      = form_for([@project, story], method: "delete", html: { id: "delete_story_#{story.id}" }) {}

      = form_for [@project, story], namespace: dom_id(story), data: { story_target: "form" } do |form|
        div
          .form-group.story-controls
            = form.submit "Save", data: { action: "click->story#close:stop" }
            - if story.persisted?
              = form.submit "Delete", class: "delete", form: "delete_story_#{story.id}", data: { confirm: "Are you sure you want to delete this story?" }
            input.cancel type="button" value="Cancel" data-action="click->story#close:prevent:stop"

        div
          .col-xs-12.form-group.input-group.input-group-sm
            input#story-link-5433.form-control.input-sm readonly="" value=project_url(@project, anchor: dom_id(story))

            /
              span.input-group-btn
                button.btn.btn-default.btn-clipboard data-clipboard-target="#story-link-#{story.id}" type="button" title="Copy URL"
                  img.clipboard-icon src="/clippy.svg" alt="Copy URL"
                button.btn.btn-default.btn-clipboard-id.btn-clipboard data-clipboard-text="#5433" type="button" title="Copy ID"
                  | ID
                button.btn.btn-default.toggle-history title="View history"
                  i.mi.md-18 history
                button.btn.btn-default.clone-story title="Clone story"
                  i.mi.md-18 content_copy

        .form-group
          = form.label :title
          = form.text_field :title, placeholder: "Story title", maxlength: "255", class: "title form-control input-sm", data: { story_target: "permanent" }

        .form-group.form-inline
          .form-group
            = form.label :estimate
            br
            = form.select :estimate, @project.point_values, { disabled: true, include_blank: "no estimate" }, { class: "form-control input-sm story_estimate", data: { story_target: "permanent" } }

          .form-group
            = form.label :story_type
            br
            = form.select :story_type, Story::STORY_TYPES, {}, { class: "form-control input-sm story_type", data: { story_target: "permanent" } }

          .form-group
            = form.label :state
            br
            = form.select :state, form.object.states, {}, { class: "form-control input-sm story_state", data: { story_target: "permanent" } }

        .form-group.form-inline
          .form-group
            = form.label :requested_by_id, "Requested by"
            br
            = form.collection_select :requested_by_id, @project.users, :id, :name, { include_blank: "---" }, { class: "form-control input-sm requested_by_id", data: { story_target: "permanent" } }

          .form-group data-owned-by=""
            = form.label :owned_by_id, "Owned by"
            br
            = form.collection_select :owned_by_id, @project.users, :id, :name, { include_blank: "---" }, { class: "form-control input-sm owned_by_id", data: { story_target: "permanent" } }

        .form-group
          .form-group data-tags=""
            = form.label :labels
            br
            = form.text_field :labels, class: "form-control input-sm labels tagit-hidden-field", data: { story_target: "permanent" }
            /
              ul.tagit.ui-widget.ui-widget-content.ui-corner-all
                li.tagit-new
                  input.ui-widget-content.ui-autocomplete-input type="text" autocomplete="off"

        .form-group
          .story-description
            = form.label :description
            br
            = form.text_area :description , class: "form-control description-textarea", data: { story_target: "permanent" }

        = form.fields_for :notes, Note.new do |note_form|
          div
            .form-group
              = note_form.label :note, "Notes"
              .notelist
                - form.object.notes.each do |note|
                  .note
                    .note_note => simple_format auto_link note.note
                    .note_meta
                      span.user => note.user_name
                      span.created_at => note.created_at
                      span = link_to "Delete", [@project, form.object, note], method: :delete, class: "delete-btn delete-note", title: "Delete"
                    .attachments
                      - note.attachments.each do |attachment|
                        => link_to attachment.filename, attachment, class: "attachment", download: true

          div
            .note_form.clearfix
              = note_form.text_area :note, class: "form-control note-textarea", data: { story_target: "permanent note" }
              = note_form.label :attachments, "Attachment(s)"
              = note_form.bard_file_field :attachments, multiple: true, data: { story_target: "permanent attachment" }
              button.add-note.btn.btn-default.btn-xs type="submit"
                | Add note

